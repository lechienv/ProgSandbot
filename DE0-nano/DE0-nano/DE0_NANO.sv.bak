`timescale 1ns/1ps

//=======================================================
//
// MYCycloneMips
//
//-------------------------------------------------------
//
// SPI frame = 1 opcode (R/W bit + 7-bit address) + 1 data byte
//
// Registers Definition :
//
// 00 - R/W : Config: Enable INT, IO_A/B, IO_C/D, CAN
// 01 - R   : Status : KEY, SW
// 02 - R/W : Led70 : LED
// 10 - R/W : IO_A_Data
// 11 - R/W : IO_A_Enable_Out
// 20 - R/W : IO_B_Data
// 21 - R/W : IO_B_Enable_Out
// 30 - R/W : IO_C_Data
// 31 - R/W : IO_C_Enable_Out
// 40 - R/W : IO_D_Data
// 41 - R/W : IO_D_Enable_Out
//
// Config : Bit0 = 1 : Enable INT1 for KEY0
//          Bit1 = 1 : Enable INT2 for KEY1
//          Bit2 = 1 : Reserved
//          Bit3 = 1 : Reserved
//          Bit4 = 1 : Enable IO_A and IO_B (GPIO_10)
//          Bit5 = 1 : Enable IO_C and IO_D (GPIO_33)
//          Bit6 = 1 : Enable CAN
//          Bit7 = 1 : Reserved
//
// Status : Bit0 = KEY0
//          Bit1 = KEY1
//          Bit2 = 0
//          Bit3 = 0
//          Bit4 = SW0
//          Bit5 = SW1
//          Bit6 = SW2
//          Bit7 = SW3
//
//=======================================================

module DE0_NANO(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,
	
	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PORT declarations
//=======================================================
//////////// CLOCK //////////
input logic		          		CLOCK_50;

//////////// LED //////////
output logic		  [7:0]		LED;

//////////// KEY //////////
input logic		     [1:0]		KEY;

//////////// SW //////////
input logic		     [3:0]		SW;

//////////// 2x13 GPIO Header //////////
inout logic		    [12:0]		GPIO_2;
input logic		     [2:0]		GPIO_2_IN;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout wire		    [33:0]		GPIO_0;
input logic		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout wire		    [33:0]		GPIO_1;
input logic		     [1:0]		GPIO_1_IN;

//=======================================================
//   PIC32 Interface
//=======================================================
assign LED = {~GPIO_1[8], GPIO_1[7], 6'b0}; //, GPIO_1_IN[0]
//--- Declarations --------------------------------------

/*
logic	PIC32_SDO1A, PIC32_SDI1A, PIC32_SCK1A, PIC32_CS_FPGA;
logic	PIC32_INT1, PIC32_INT2;
logic	PIC32_C1TX, PIC32_C1RX;
logic	PIC32_SCL3A, PIC32_SDA3A;
logic	PIC32_RESET;

logic [7:0] Config;
logic [7:0] Status;
logic [7:0] Led70;
logic [7:0] IO_A_Data_In, IO_A_Data_Out, IO_A_Enable_Out;
logic [7:0] IO_B_Data_In, IO_B_Data_Out, IO_B_Enable_Out;
logic [7:0] IO_C_Data_In, IO_C_Data_Out, IO_C_Enable_Out;
logic [7:0] IO_D_Data_In, IO_D_Data_Out, IO_D_Enable_Out;

genvar i;

//---- Assign GPIO_2 Header (connected to PIC32) --------

assign PIC32_SDO1A	= GPIO_2[0];
assign GPIO_2[1]		= PIC32_CS_FPGA ? 1'bz : PIC32_SDI1A;
assign PIC32_SCK1A	= GPIO_2[2];
assign PIC32_CS_FPGA	= GPIO_2[3];

assign GPIO_2[4]     = PIC32_INT1;
assign GPIO_2[5]     = PIC32_INT2;

assign PIC32_C1TX		= GPIO_2[6];
assign GPIO_2[7]		= Config[6] ? PIC32_C1RX : 1'bz;

assign PIC32_SCL3A	= GPIO_2[8];
assign PIC32_SDA3A	= GPIO_2[9];

assign PIC32_RESET	= GPIO_2[10];
//assign PIC32_RESET	= ~KEY[0];


//--- Assign GPIO_1 Header -----------------------------

assign GPIO_1[0]     = Config[4];
assign GPIO_1[33]    = Config[5];


assign PIC32_C1RX    = GPIO_1[29];
assign GPIO_1[30]    = PIC32_C1TX;
assign GPIO_1[31]    = PIC32_SCL3A;
assign GPIO_1[32]    = PIC32_SDA3A;

//--- Assign Status, INT, Led70 -------------------------

assign PIC32_INT1 = Config[0] ? KEY[0] : 1'b1;
assign PIC32_INT2 = Config[1] ? KEY[1] : 1'b1;

always @ (posedge CLOCK_50)
	Status = {SW, 2'b00, KEY};

//--- Assign signals FPGA -> PIC -------------------------

logic LaserSign, LaserSync, LaserCodeur;

assign LaserSync = GPIO_1[7];
assign LaserSign = GPIO_1[8];
assign LaserCodeur = GPIO_1_IN[0];


always @ (posedge CLOCK_50)
begin
	IO_A_Data_In <= {5'b0, LaserSign, LaserSync, LaserCodeur}; //Send signal laser, syncro laser and codeur laser on IOA
end


//--- SPI Interface -------------------------------------

MySPI MySPI_instance (
	.theClock(CLOCK_50), .theReset(PIC32_RESET),
	.MySPI_clk(PIC32_SCK1A), .MySPI_cs(PIC32_CS_FPGA), .MySPI_sdi(PIC32_SDO1A), .MySPI_sdo(PIC32_SDI1A),
	.Config(Config),
	.Status(Status),
	.Led70(Led70),
	.IO_A_Data_In(IO_A_Data_In), 			.IO_B_Data_In(IO_B_Data_In), 			.IO_C_Data_In(IO_C_Data_In), 			.IO_D_Data_In(IO_D_Data_In),
	.IO_A_Data_Out(IO_A_Data_Out), 		.IO_B_Data_Out(IO_B_Data_Out), 		.IO_C_Data_Out(IO_C_Data_Out), 		.IO_D_Data_Out(IO_D_Data_Out),
	.IO_A_Enable_Out(IO_A_Enable_Out), 	.IO_B_Enable_Out(IO_B_Enable_Out), 	.IO_C_Enable_Out(IO_C_Enable_Out), 	.IO_D_Enable_Out(IO_D_Enable_Out)
);

*/
endmodule
  
//=======================================================
